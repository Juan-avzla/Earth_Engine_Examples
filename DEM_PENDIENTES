/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: #98ff00 */ee.Geometry.Point([-99.14354181735696, 19.432385053414965]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// llamada al recurso de modelo digital de terreno
var DEM = ee.Image('JAXA/ALOS/AW3D30/V2_2');

// funciones slope y aspect (pendiente y laderas)

var slope = ee.Terrain.slope (DEM);

var aspect = ee.Terrain.aspect (DEM);

Map.addLayer (slope, {
 min: 0.00, //angulo minimo de pendiente
 max: 90.00, //angulo maximo de pendiente
 palette: ['3ae237', 'b5e22e', 'd6e21f', 'fff705',
 'ffd611', 'ffb613', 'ff8b13', 'ff6e08', 'ff500d',
 'ff0000', 'de0101', 'c21301', '0602ff', '235cb1', 
 '307ef3', '269db1', '30c8e2', '32d3ef', '3be285', 
 '3ff38f', '86e26f']}, 'pendiente');

  
//Representamos la composición RGB a color natural o falso color. Por ejemplo, un RGB 754
//Obtenemos una única image fruto de la combinación de píxels disponibles con ausencia de nube
var rgbVis = {
  min: 5000.0,
  max: 30000.0,
  bands: ['B7', 'B5', 'B2'],};
Map.addLayer(Landsat.median(), rgbVis, 'LandsatCloudless');

//Exportamos la imagen incorporando las bandas que queramos en el GeoTIF y asignamos resolución de salida
Export.image.toDrive({
  image: Landsat.select("B7", "B5", "B2"), //Reseñar las bandas a exportar (todas o las representadas)
  description: 'LandsatCLOUDLESS', //Nombre de archivo de salida a exportar en Google Drive
  scale: 30,}); //Resolucion de pixel de salida
  
  
  
